import os
import json
import flask
from flask import (
    Flask,
    request
)
from flask.logging import default_handler
from .util import epoch_ms
import logging

VERSION = "0.0.1"

def _initialize_logging():
    root = logging.getLogger()
    root.addHandler(default_handler)
    root.setLevel('INFO')

def _log(msg, *args):
    logging.getLogger(__name__).info(msg, *args)

def create_app(test_config=None):
    _initialize_logging()

    app = Flask(__name__, instance_relative_config=True)
    if test_config is None:
        app.config.from_pyfile('config.py', silent=True)
    else:
        app.config.from_mapping(test_config)

    @app.route('/', methods=['GET'])
    def root():
        return flask.jsonify({
            "service": "Notification Feeds Service",
            "version": VERSION,
            "servertime": epoch_ms()
        })

    @app.route('/api/V1/notifications/', methods=['GET'])
    def get_notifications():
        """
        General flow should be:
        1. validate/authenticate user
        2. make user feed object
        3. query user feed for most recent, based on params
        """
        # dummy code below
        max_notes = request.args.get('n', default=10, type=int)
        rev_sort = request.args.get('rev', default=0, type=int)
        rev_sort = False if rev_sort==0 else True
        level_filter = request.args.get('f', default=None, type=str)
        include_seen = request.args.get('seen', default=0, type=int)
        include_seen = False if include_seen==0 else True
        return json.dumps({
            "max_notes": max_notes,
            "rev_sort": rev_sort,
            "level_filter": level_filter,
            "include_seen": include_seen
        })

    @app.route('/api/V1/notification/<note_id>', methods=['GET'])
    def get_single_notification(note_id):
        raise NotImplementedError()

    @app.route('/api/V1/notifications/unsee/', methods=['POST'])
    def mark_notifications_unseen():
        """Form data should have a list of notification ids to mark as unseen"""
        raise NotImplementedError()

    @app.route('/api/V1/notifications/see/', methods=['POST'])
    def mark_notifications_seen():
        """Form data should have a list of notifications to mark as seen"""
        raise NotImplementedError()

    @app.route('/api/V1/notification/', methods=['PUT'])
    def add_notification():
        """
        Adds a new notification for other users to see.
        Form data requires the following:
        * `actor` - a user or org id.
        * `type` - one of the type keywords (see below, TBD (as of 10/8))
        * `target` - optional, a user or org id. - always receives this notification
        * `object` - object of the notice. For invitations, the group to be invited to. For narratives, the narrative UPA.
        * `level` - alert, error, warning, or request.
        * `content` - optional, content of the notification, otherwise it'll be autogenerated from the info above.
        * `global` - true or false. If true, gets added to the global notification feed and everyone gets a copy.

        This also requires a service token as an Authorization header. Once validated, will be used
        as the Source of the notification, and used in logic to determine which feeds get notified.
        """
        raise NotImplementedError()

    return app

