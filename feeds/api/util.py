from feeds.exceptions import (
    IllegalParameterError,
    MissingParameterError
)
from feeds.entity.entity import Entity
from feeds.feeds.notification.notification_feed import NotificationFeed
from feeds.config import get_config


def parse_notification_params(params: dict, is_global: bool=False) -> dict:
    """
    Parses and verifies all the notification params are present.
    Raises a MissingParameter error otherwise.
    Returns the params after parsing (currently does nothing, but if
    transformations are needed in the future, here's where that happens).
    In total, can raise:
    MissingParameterError (if required params are missing)
    IllegalParameterError (if the wrong types are present)
    EntityValidationError (if an Entity is malformed)
    """
    # * `actor` - an Entity structure - gets turned into an Entity object when returned
    # * `type` - one of the type keywords
    # * `target` - optional, a list of Entity structures. This gets turned into a list of
    #   entity object on return
    # * `object` - object of the notice, an Entity structure. For invitations, the group to be
    #   invited to. For narratives, the narrative UPA. Gets turned into an Entity object
    #   when returned
    # * `users` - a list of Entity objects, should be of either type user or group
    # * `level` - alert, error, warning, or request.
    # * `context` - optional, context of the notification, otherwise it'll be
    #   autogenerated from the info above.

    if not isinstance(params, dict):
        raise IllegalParameterError('Expected a JSON object as an input.')
    required_list = ['verb', 'level']
    if not is_global:
        required_list = required_list + ['actor', 'source', 'object']
    missing = [r for r in required_list if r not in params or params.get(r) is None]
    if missing:
        raise MissingParameterError("Missing parameter{} - {}".format(
            "s" if len(missing) > 1 else '',
            ", ".join(missing)
        ))
    if not is_global:
        # do the entity transformations
        # If there are any EntityValidationErrors, they'll pop on up.
        params["actor"] = Entity.from_dict(params["actor"])
        params["object"] = Entity.from_dict(params["object"])
        if "target" in params:
            target = params["target"]
            if isinstance(target, list):
                params["target"] = [Entity.from_dict(t) for t in target]
            else:
                raise IllegalParameterError("Expected target to be a list of Entity structures.")
        if "users" in params:
            users = params["users"]
            if isinstance(users, list):
                params["users"] = [Entity.from_dict(u) for u in users]
            else:
                raise IllegalParameterError("Expected users to be a list of Entity structures.")
    return params


def parse_expire_notifications_params(params: dict, is_admin: bool=False) -> dict:
    """
    Here's the parsing rules.
    Got 3 keys - source, note_ids, external_keys
    at least one of note_ids, external_keys must exist.
    Both of those are lists of strings, if they exist.

    if external_keys exists, source must exist and be a string.
    if not is_admin, source must exist and be a string.

    The whole thing's gotta be a JSON object.
    """
    if not isinstance(params, dict):
        raise IllegalParameterError('Expected a JSON object as an input.')

    if 'source' not in params or params.get('source') is None:
        if not is_admin:
            raise MissingParameterError('Missing parameter "source"')

    if 'note_ids' not in params and 'external_keys' not in params:
        raise MissingParameterError('Missing parameter "note_ids" or "external_keys"')

    if not isinstance(params.get('note_ids', []), list):
        raise IllegalParameterError('Expected note_ids to be a list.')
    else:
        for i in params.get('note_ids', []):
            if not isinstance(i, str):
                raise IllegalParameterError('note_ids must be a list of strings')

    if not isinstance(params.get('external_keys', []), list):
        raise IllegalParameterError('Expected external_keys to be a list.')
    else:
        for i in params.get('external_keys', []):
            if not isinstance(i, str):
                raise IllegalParameterError('external_keys must be a list of strings')

    if is_admin:
        if len(params.get("external_keys", [])) and not isinstance(params.get("source"), str):
            raise MissingParameterError(
                'Parameter "source" must be present when expiring notifications by '
                'their external keys'
            )

    return params


def fetch_global_notifications(count=0) -> dict:
    """
    Always returns notifications in user view.
    """
    cfg = get_config()
    if count == 0:
        count = cfg.default_max_notes
    global_feed = get_global_feed()
    global_notes = global_feed.get_notifications(count=count, user_view=True)
    return global_notes


def get_global_feed() -> NotificationFeed:
    cfg = get_config()
    return NotificationFeed(cfg.global_feed, cfg.global_feed_type)
